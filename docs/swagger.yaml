basePath: /
definitions:
  database.PaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.Product'
        type: array
      limit:
        type: integer
      page:
        type: integer
    type: object
  dto.CreateProductInput:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.GetJWTInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.GetJWTOutput:
    properties:
      access_token:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  handlers.Error:
    properties:
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: ivandersalvadorruiz@gmail.com
    name: Ivander
    url: https://linkedin.com/in/ivandersr
  description: Products API with Authentication
  license:
    name: MIT
    url: https://opensource.org/license/mit
  termsOfService: http://swagger.io/terms
  title: Products API Go
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Returns a list of all products with optional pagination
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: items per page
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.PaginatedResponse'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: List Porducts
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - products
  /products/{id}:
    delete:
      description: Deletes a product by its ID
      parameters:
      - description: product ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Deletes a product
      tags:
      - products
    get:
      description: Returns a product by its ID
      parameters:
      - description: product ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Find a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates a product data by its ID
      parameters:
      - description: product ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Updates a product
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Creates authenticatable user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Create user
      tags:
      - users
  /users/token:
    post:
      consumes:
      - application/json
      description: Generates a token to authenticate for requests
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetJWTInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetJWTOutput'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Generate JWT
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
